Question -->  https://practice.geeksforgeeks.org/problems/inversion-of-array-1587115620/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article

class Solution
{
    // arr[]: Input Array
    // N : Size of the Array arr[]
    //Function to count inversions in the array.
    static long inversionCount(long arr[], long N)
    {
        // Your Code Here
        long[] temp = new long[(int) N];
        return mergeSortAndCount(arr, temp, 0, N - 1);
    }

    private static long mergeSortAndCount(long arr[], long temp[], long left, long right) {
        long count = 0;
        if (left >= right) return count;
        if (left < right) { 
            long mid = (left + right) / 2;

            count += mergeSortAndCount(arr, temp, left, mid); 
            count += mergeSortAndCount(arr, temp, mid + 1, right); 
            count += mergeAndCount(arr, temp, left, mid + 1, right); 
        }
        return count;
    }

    private static long mergeAndCount(long arr[], long temp[], long left, long mid, long right) {
        long i = left;
        long j = mid;  
        long k = left; 
        long count = 0;

        while (i <= mid - 1 && j <= right) {
            if (arr[(int) i] <= arr[(int) j]) {
                temp[(int) k++] = arr[(int) i++];
            } else {
                temp[(int) k++] = arr[(int) j++];
                count += (mid - i); 
            }
        }

       
        while (i <= mid - 1)
            temp[(int) k++] = arr[(int) i++];


        while (j <= right)
            temp[(int) k++] = arr[(int) j++];

        
        for (i = left; i <= right; i++)
            arr[(int) i] = temp[(int) i];

        return count;
    }
}
