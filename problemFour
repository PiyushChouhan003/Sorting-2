Question -->  https://leetcode.com/problems/reverse-pairs/submissions/1003164011/

public class Solution {
    long count=0;
    public void merge(int[] A, int si, int mid, int ei){
        int p1=si;
        int p2=mid+1;
        int p3=0;
        int[] temp=new int[ei-si+1];

        while(p1<=mid && p2 <= ei){
         
            if((long)A[p1] > 2*(long)A[p2]){
                count += mid-p1+1;
                p2++;
            }
            else{
                p1++;
            }
        }
        p1 = si;p2=mid+1;

        while(p1<=mid && p2<=ei){
            if(A[p1]<=A[p2]){
                temp[p3]=A[p1];
                p3++;
                p1++;
            }
            else{
                temp[p3]=A[p2];
                p3++;
                p2++;
            }
        }

        while(p1<=mid){
            temp[p3]=A[p1];
            p3++;
            p1++;
        }
        while(p2<=ei){
           temp[p3]=A[p2];
            p3++;
            p2++; 
        }

        for(int i=0;i<temp.length;i++){
            A[i+si]=temp[i];
        }
        return;
    }

    public void mergeSort(int[] A, int si , int ei){
        if(si>=ei){
            return ;
        }
        int mid=(si+ei)/2;
        mergeSort(A,si,mid);
        mergeSort(A, mid+1,ei);
        merge(A,si,mid, ei);
        return;
    }

    public int reversePairs(int[] A) {
        mergeSort(A,0,A.length-1);

        return (int)count;      
    }
}
